// Generated by CoffeeScript 1.9.3
var TimeLine, addHover, alternateDate, bigPoint, canvasHeight, canvasWidth, dayFinish, dayStart, dayTime, drawBigPoints, getToday, getUseParams, height, hour, hourText, hoursToMs, line, lineText, markLine, minutes, now, now1, now2, now3, offset, s, smallMarkLine, smallPoint, timeLine, ts;

canvasWidth = 500;

canvasHeight = 0;

height = 2;

dayStart = 8;

dayFinish = 20;

dayTime = dayFinish - dayStart;

s = Snap('.svg').attr({
  viewBox: "0 0 " + (canvasWidth + 20) + " " + canvasHeight
});

getToday = function() {
  var date;
  date = new Date();
  date.setHours(8);
  return date.setMinutes(0);
};

alternateDate = function(hours) {
  if (hours > 12) {
    return hours - 12 + ':00pm';
  }
  if (hours === 12) {
    return hours + ':00pm';
  } else {
    return hours + ':00am';
  }
};

drawBigPoints = function() {
  var h, i, j, m, period, ref, results, startPoint;
  period = canvasWidth / dayTime;
  startPoint = 10;
  results = [];
  for (i = j = 0, ref = dayTime; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    h = hour.clone().appendTo(s);
    h.transform('t' + startPoint);
    m = minutes.clone().appendTo(s);
    m.transform('t' + ((period / 2) + startPoint));
    h.select('.hourText').node.innerHTML = alternateDate(dayStart + i);
    addHover(h);
    results.push(startPoint += period);
  }
  return results;
};

bigPoint = s.circle(0, 5, 1).attr({
  fill: '#999'
}).addClass('point');

hourText = s.text(-4, 3, '').attr({
  fontSize: '4px',
  fill: '#999',
  'font-weight': '100'
}).addClass('hourText');

markLine = s.line(0, 5, 0, canvasHeight).attr({
  stroke: '#999',
  'stroke-width': .5,
  'stroke-dasharray': '2,2',
  opacity: .15
}).addClass('markLine');

hour = s.g(bigPoint, hourText, markLine);

smallPoint = s.circle(0, 5, .5).attr({
  fill: '#999'
}).addClass('point');

smallMarkLine = s.line(0, 5, 0, canvasHeight).attr({
  stroke: '#999',
  'stroke-width': .5,
  'stroke-dasharray': '1,1',
  opacity: .15
}).addClass('markLine');

minutes = s.g(smallPoint, smallMarkLine);

addHover = function(e) {
  e.mouseover(function() {
    this.select('.point').animate({
      r: 1.5
    }, 200);
    return this.select('.markLine').animate({
      'stroke-dasharray': '100%',
      opacity: .8
    }, 200);
  });
  return e.mouseout(function() {
    this.select('.point').animate({
      r: 1
    }, 200);
    return this.select('.markLine').animate({
      'stroke-dasharray': '2,2',
      opacity: .15
    }, 200);
  });
};

hour.toDefs();

minutes.toDefs();

lineText = s.text(1, 15, 'Room1').attr({
  fontSize: '8px',
  fill: '#26A69A',
  'font-weight': 'bold',
  opacity: 0
}).addClass('text');

line = s.rect(0, 20, 0, height).attr({
  fill: '#80CBC4'
}).addClass('line');

timeLine = s.g(lineText, line);

timeLine.toDefs();

ts = s.rect(200, 20, 0, height).attr({
  fill: '#26A69A',
  opacity: 0
}).addClass('inUse');

ts.toDefs();

hoursToMs = function(h) {
  return h * 3600000;
};

now = new Date().getTime();

now1 = now + hoursToMs(.5);

now2 = now + hoursToMs(2);

now3 = now + hoursToMs(2.5);

getUseParams = function(t1, t2) {
  var startLength, startPoint, startTime, useTime, useWidth;
  startTime = t1 - getToday();
  startLength = (startTime / hoursToMs(dayTime)) * 100;
  useTime = (t2 - t1) / (hoursToMs(dayTime)) * 100;
  startPoint = canvasWidth / 100 * startLength;
  useWidth = canvasWidth / 100 * useTime;
  return {
    x: startPoint,
    width: useWidth
  };
};

offset = {
  height: 0,
  get: function() {
    return this.height++ * 20;
  }
};

TimeLine = (function() {
  function TimeLine(params) {
    this.roomName = params.roomName;
    this.times = params.times;
    this.init();
  }

  TimeLine.prototype.addLine = function() {
    return this.timeLine = timeLine.clone().appendTo(s);
  };

  TimeLine.prototype.addRoomName = function() {
    return this.timeLine.select('.text').node.innerHTML = this.roomName;
  };

  TimeLine.prototype.addUses = function() {
    var t;
    t = this.timeLine;
    return this.times.forEach(function(e, i, arr) {
      t.append(ts.clone().attr(getUseParams(e.startTime, e.finishTime)));
    });
  };

  TimeLine.prototype.setAnimation = function() {
    var t;
    t = this.timeLine;
    return t.select('.line').animate({
      width: canvasWidth
    }, 1000, function() {
      t.select('.text').animate({
        opacity: 1
      }, 500);
      return t.selectAll('.inUse').animate({
        opacity: 1
      }, 500);
    });
  };

  TimeLine.prototype.canvasAdjust = function() {
    canvasHeight = canvasHeight + 20;
    s.attr({
      viewBox: "0 0 " + (canvasWidth + 20) + " " + (canvasHeight + 10)
    });
    return s.selectAll('.markLine').attr({
      y2: canvasHeight
    });
  };

  TimeLine.prototype.init = function() {
    this.canvasAdjust();
    this.addLine();
    this.addRoomName();
    this.addUses();
    this.timeLine.transform('t10,' + offset.get());
    return this.setAnimation();
  };

  return TimeLine;

})();

drawBigPoints();

new TimeLine({
  roomName: 'Red Room',
  times: [
    {
      startTime: now,
      finishTime: now1
    }, {
      startTime: now2,
      finishTime: now3
    }
  ]
});

new TimeLine({
  roomName: 'Blue Room',
  times: [
    {
      startTime: now,
      finishTime: now1
    }, {
      startTime: now2,
      finishTime: now3
    }
  ]
});

new TimeLine({
  roomName: 'Grey Room',
  times: [
    {
      startTime: now,
      finishTime: now1
    }
  ]
});

//# sourceMappingURL=animation.js.map
