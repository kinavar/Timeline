// Generated by CoffeeScript 1.9.3
(function() {
  var TimeLine, canvasWidth, dayFinish, dayStart, dayTime, getToday, getUseParams, height, hoursToMs, line, lineText, now, now1, now2, now3, offset, room, room2, room3, room4, s, timeLine, ts;

  s = Snap('.svg').attr({
    viewBox: '0 0 500 100'
  });

  canvasWidth = 500;

  height = 2;

  dayStart = 8;

  dayFinish = 20;

  dayTime = dayFinish - dayStart;

  getToday = function() {
    var date;
    date = new Date();
    date.setHours(8);
    return date.setMinutes(0);
  };

  lineText = s.text(1, 15, 'Room1').attr({
    fontSize: '8px',
    fill: '#26A69A',
    'font-weight': 'bold',
    opacity: 0
  }).addClass('text');

  line = s.rect(0, 20, 0, height).attr({
    fill: '#80CBC4'
  }).addClass('line');

  timeLine = s.g(lineText, line);

  timeLine.toDefs();

  ts = s.rect(200, 20, 0, height).attr({
    fill: '#26A69A',
    opacity: 0
  }).addClass('inUse');

  ts.toDefs();

  hoursToMs = function(h) {
    return h * 3600000;
  };

  now = new Date().getTime();

  now1 = now + hoursToMs(.5);

  now2 = now + hoursToMs(2);

  now3 = now + hoursToMs(2.5);

  getUseParams = function(t1, t2) {
    var startLength, startPoint, startTime, useTime, useWidth;
    startTime = t1 - getToday();
    startLength = (startTime / hoursToMs(dayTime)) * 100;
    useTime = (t2 - t1) / (hoursToMs(dayTime)) * 100;
    startPoint = canvasWidth / 100 * startLength;
    useWidth = canvasWidth / 100 * useTime;
    return {
      x: startPoint,
      width: useWidth
    };
  };

  offset = {
    height: 0,
    get: function() {
      return this.height++ * 20;
    }
  };

  TimeLine = (function() {
    function TimeLine(params) {
      this.roomName = params.roomName;
      this.times = params.times;
      this.init();
    }

    TimeLine.prototype.addLine = function() {
      return this.timeLine = timeLine.clone().appendTo(s);
    };

    TimeLine.prototype.addRoomName = function() {
      return this.timeLine.select('.text').node.innerHTML = this.roomName;
    };

    TimeLine.prototype.addUses = function() {
      var t;
      t = this.timeLine;
      return this.times.forEach(function(e, i, arr) {
        t.append(ts.clone().attr(getUseParams(arr[i], arr[i + 1])));
        arr.splice(0, 1);
      });
    };

    TimeLine.prototype.setAnimation = function() {
      var t;
      t = this.timeLine;
      return t.select('.line').animate({
        width: canvasWidth
      }, 1000, function() {
        t.select('.text').animate({
          opacity: 1
        }, 500);
        return t.selectAll('.inUse').animate({
          opacity: 1
        }, 500);
      });
    };

    TimeLine.prototype.init = function() {
      this.addLine();
      this.addRoomName();
      this.addUses();
      this.timeLine.transform('t0,' + offset.get());
      return this.setAnimation();
    };

    return TimeLine;

  })();

  room = new TimeLine({
    roomName: 'Red Room',
    times: [now, now1, now2, now3]
  });

  room2 = new TimeLine({
    roomName: 'Blue Room',
    times: [now, now1, now2, now3]
  });

  room3 = new TimeLine({
    roomName: 'Grey Room',
    times: [now, now1, now2, now3]
  });

  room4 = new TimeLine({
    roomName: 'Grey hjk Room',
    times: []
  });

}).call(this);

//# sourceMappingURL=animation.js.map
